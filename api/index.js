import 'dotenv/config';
import express from 'express';
const app = express();

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Mattermost
const mattermostUrl = process.env.MATTERMOST_URL;
const botToken = process.env.BOT_TOKEN;

if (!mattermostUrl || !botToken) {
  process.exit(1);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –≥—Ä—É–ø–ø
function createGroups(users, groupSize) {
  const shuffled = [...users].sort(() => 0.5 - Math.random());
  const groups = [];
  for (let i = 0; i < shuffled.length; i += groupSize) {
    groups.push(shuffled.slice(i, i + groupSize));
  }
  return groups;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ Mattermost
async function createPost(channelId, message) {
  const postData = {
    channel_id: channelId,
    message: message,
  };

  const response = await fetch(`${mattermostUrl}/api/v4/posts`, {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${botToken.replace('Bearer ', '')}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(postData),
  });

  if (!response.ok) {
    throw new Error(`HTTP ${response.status}`);
  }

  return response.json();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Slash-–∫–æ–º–∞–Ω–¥—ã /groupbot
app.post('/groupbot', async (req, res) => {
  const { channel_id, text } = req.body;

  if (!text || text.trim() === '') {
    res.json({
      response_type: 'ephemeral',
      text: `**GroupBot - –°–ø—Ä–∞–≤–∫–∞:**
      
‚Ä¢ \`/groupbot <—á–∏—Å–ª–æ> | <–∏–º—è1> |\n| --- |\n| <–∏–º—è2> |\n| <–∏–º—è3> |\n...\` - —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—ã
  –ü—Ä–∏–º–µ—Ä:
  \`\`\`
  /groupbot 2 | –ï–ª–µ–Ω–∞ –Ø—â–µ–Ω–∫–æ |
  | --- |
  | –ê–Ω–∞—Ç–æ–ª–∏–π –ö–∏—Ä–∏–ª–ª–æ–≤ |
  | –ê–Ω–∞—Å—Ç–∞—Å–∏—è –ì—Ä–µ—á–∞–Ω–æ–≤–∞ |
  \`\`\`
      
**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
‚Üí –ß–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: 2‚Äì5
‚Üí –ò–º–µ–Ω–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö`,
    });
    return;
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã
  const lines = text
    .split('\n')
    .map((line) => line.trim())
    .filter(Boolean);
  if (lines.length < 3 || !lines[1].match(/^\|\s*---\s*\|$/)) {
    res.json({
      response_type: 'ephemeral',
      text: '–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä –∏–∑ —Å–ø—Ä–∞–≤–∫–∏.',
    });
    return;
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∏ –ø–µ—Ä–≤–æ–≥–æ –∏–º–µ–Ω–∏
  const firstLineMatch = lines[0].match(/^\s*(\d+)\s*\|\s*([^|]+)\s*\|$/);
  if (!firstLineMatch) {
    res.json({
      response_type: 'ephemeral',
      text: '–û—à–∏–±–∫–∞: –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∏—Å–ª–æ –∏ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2 | –ï–ª–µ–Ω–∞ –Ø—â–µ–Ω–∫–æ |").',
    });
    return;
  }

  const groupSize = parseInt(firstLineMatch[1], 10);
  const firstName = firstLineMatch[2].trim();

  if (isNaN(groupSize) || groupSize < 2 || groupSize > 5) {
    res.json({
      response_type: 'ephemeral',
      text: '–û—à–∏–±–∫–∞: —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 5.',
    });
    return;
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω
  const names = [firstName];
  for (const line of lines.slice(2)) {
    const nameMatch = line.match(/^\s*\|\s*([^|]+)\s*\|$/);
    if (nameMatch) {
      names.push(nameMatch[1].trim());
    }
  }

  if (names.length < groupSize) {
    res.json({
      response_type: 'ephemeral',
      text: `–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (${names.length}) –¥–ª—è –≥—Ä—É–ø–ø —Ä–∞–∑–º–µ—Ä–∞ ${groupSize}.`,
    });
    return;
  }

  try {
    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø
    const groups = createGroups(names, groupSize);
    let response = `## üéØ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã\n`;
    response += `**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** ${names.length} | **–†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø:** ${groupSize}\n\n`;
    groups.forEach((group, index) => {
      const members = group.join(', ');
      response += `**–ì—Ä—É–ø–ø–∞ ${index + 1}:** ${members}\n`;
    });

    const remainder = names.length % groupSize;
    if (remainder > 0) {
      response += `\n*–ü–æ—Å–ª–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç ${remainder} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤*`;
    }

    // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    await createPost(channel_id, response);

    res.json({
      response_type: 'ephemeral',
      text: '–ì—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!',
    });
  } catch (error) {
    res.json({
      response_type: 'ephemeral',
      text: `–û—à–∏–±–∫–∞: ${error.message}`,
    });
  }
});

// Health check endpoint
app.get('/health', async (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {});

export default app;
