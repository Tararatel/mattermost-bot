import 'dotenv/config';
import { Client4 } from '@mattermost/client';
import express from 'express';
const app = express();

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Mattermost
const mattermostUrl = process.env.MATTERMOST_URL;
const botToken = process.env.BOT_TOKEN;

if (!mattermostUrl || !botToken) {
  console.error(
    '–û—à–∏–±–∫–∞: MATTERMOST_URL –∏–ª–∏ BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è',
  );
  process.exit(1);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
const client = new Client4();
client.setUrl(mattermostUrl);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function testAuth() {
  try {
    const cleanToken = botToken.replace('Bearer ', '');
    client.setToken(cleanToken);
    console.log(
      '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞:',
      cleanToken.substring(0, 10) + '...',
    );
    const user = await client.getMe();
    console.log('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.id);
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error.message);
    return false;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ HTTP
async function getChannelMembersHttp(channelId) {
  try {
    const cleanToken = botToken.replace('Bearer ', '');
    console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ HTTP, channelId:', channelId);

    const membersResponse = await fetch(
      `${mattermostUrl}/api/v4/channels/${channelId}/members`,
      {
        method: 'GET',
        headers: {
          Authorization: `Bearer ${cleanToken}`,
          'Content-Type': 'application/json',
        },
      },
    );

    if (!membersResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${membersResponse.status}`);
    }

    const members = await membersResponse.json();
    console.log('–ü–æ–ª—É—á–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–∞–Ω–∞–ª–∞:', members.length);
    const userIds = members.map((member) => member.user_id);
    console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', userIds);

    const users = [];
    for (const userId of userIds) {
      try {
        const userResponse = await fetch(`${mattermostUrl}/api/v4/users/${userId}`, {
          method: 'GET',
          headers: {
            Authorization: `Bearer ${cleanToken}`,
            'Content-Type': 'application/json',
          },
        });

        if (userResponse.ok) {
          const user = await userResponse.json();
          if (!user.is_bot && user.delete_at === 0) {
            console.log('–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.id, user.username);
            users.push(user);
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId, error.message);
      }
    }

    console.log(
      '–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:',
      users.map((u) => ({ id: u.id, username: u.username })),
    );
    return users;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ getChannelMembersHttp:', error.message);
    return [];
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
async function getChannelMembers(channelId) {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞, channelId:', channelId);
    try {
      await client.getMe();
      console.log('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è SDK —É—Å–ø–µ—à–Ω–∞');

      const members = await client.getChannelMembers(channelId);
      console.log('–ü–æ–ª—É—á–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ SDK:', members.length);
      const userIds = Array.isArray(members) ? members.map((m) => m.user_id) : [];
      console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', userIds);

      const users = [];
      for (const userId of userIds) {
        try {
          const user = await client.getUser(userId);
          if (!user.is_bot && user.delete_at === 0) {
            console.log('–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.id, user.username);
            users.push(user);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId, error.message);
        }
      }

      console.log(
        '–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:',
        users.map((u) => ({ id: u.id, username: u.username })),
      );
      return users;
    } catch (sdkError) {
      console.error('–û—à–∏–±–∫–∞ SDK, –ø–µ—Ä–µ—Ö–æ–¥ –∫ HTTP:', sdkError.message);
      return await getChannelMembersHttp(channelId);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ getChannelMembers:', error.message);
    return [];
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ HTTP
async function createPostHttp(channelId, message, props = null) {
  try {
    const cleanToken = botToken.replace('Bearer ', '');
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ HTTP, channelId:', channelId);
    const postData = {
      channel_id: channelId,
      message: message,
    };

    if (props) {
      postData.props = props;
    }

    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞:', JSON.stringify(postData, null, 2));

    const response = await fetch(`${mattermostUrl}/api/v4/posts`, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${cleanToken}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(postData),
    });

    if (response.ok) {
      const result = await response.json();
      console.log('–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', result.id);
      return result;
    } else {
      throw new Error(`HTTP ${response.status}`);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ createPostHttp:', error.message);
    throw error;
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –≥—Ä—É–ø–ø
function createGroups(users, groupSize) {
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø, —Ä–∞–∑–º–µ—Ä:', groupSize, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', users.length);
  const shuffled = [...users].sort(() => 0.5 - Math.random());
  const groups = [];
  for (let i = 0; i < shuffled.length; i += groupSize) {
    groups.push(shuffled.slice(i, i + groupSize));
  }
  console.log(
    '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:',
    groups.map((g) => g.map((u) => u.username)),
  );
  return groups;
}

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const sessions = {};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
async function updateSelectionMenu(channelId, userId) {
  console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é, channelId:', channelId, 'userId:', userId);
  const session = sessions[userId];
  if (!session) {
    console.log('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è userId:', userId);
    return;
  }

  console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', JSON.stringify(session, null, 2));
  const selectedCount = session.selectedUsers.length;
  const selectedUsernames = session.allUsers
    .filter((user) => session.selectedUsers.includes(user.id))
    .map((user) => `@${user.username}`)
    .join(', ');
  console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', selectedUsernames);

  const baseUrl = process.env.VERCEL_URL || 'https://mattermost-bot-vert.vercel.app';
  console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π baseUrl:', baseUrl);

  // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userButtons = session.allUsers.slice(0, 20).map((user) => {
    const isSelected = session.selectedUsers.includes(user.id);
    console.log(`–ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}, –≤—ã–±—Ä–∞–Ω: ${isSelected}`);
    return {
      name: `${isSelected ? '‚úÖ' : '‚¨ú'} ${user.username}`,
      integration: {
        url: `${baseUrl}/toggle-user`,
        context: {
          action: 'toggle_user',
          user_id: userId,
          target_user_id: user.id,
          channel_id: channelId,
        },
      },
      type: 'button',
      style: isSelected ? 'primary' : 'default',
    };
  });

  const attachments = [
    {
      color: '#2196F3',
      title: 'üéØ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø',
      text: `–ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ: **${session.allUsers.length}**\n\n**–®–∞–≥ 1:** –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (${selectedCount} –≤—ã–±—Ä–∞–Ω–æ)`,
      actions: userButtons.slice(0, 5),
    },
  ];

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–Ω–æ–ø–æ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (userButtons.length > 5) {
    for (let i = 5; i < userButtons.length; i += 5) {
      attachments.push({
        color: '#2196F3',
        text: ' ',
        actions: userButtons.slice(i, i + 5),
      });
    }
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (selectedCount > 0) {
    attachments.push({
      color: '#4CAF50',
      text: `**–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:** ${selectedUsernames}`,
      actions: [],
    });
  }

  // –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
  attachments.push({
    color: '#FF9800',
    text: '**–®–∞–≥ 2:** –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø',
    actions: [
      {
        name: 'select_size',
        type: 'select',
        placeholder: `–†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã: ${session.groupSize}`,
        options: [
          { text: 'üë• 2 —á–µ–ª–æ–≤–µ–∫–∞', value: '2' },
          { text: 'üë• 3 —á–µ–ª–æ–≤–µ–∫–∞', value: '3' },
          { text: 'üë• 4 —á–µ–ª–æ–≤–µ–∫–∞', value: '4' },
          { text: 'üë• 5 —á–µ–ª–æ–≤–µ–∫', value: '5' },
        ],
        integration: {
          url: `${baseUrl}/select-size`,
          context: {
            action: 'select_size',
            user_id: userId,
            channel_id: channelId,
          },
        },
      },
    ],
  });

  // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø (–∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
  if (selectedCount > 0) {
    attachments.push({
      color: '#4CAF50',
      text: '**–®–∞–≥ 3:** –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—ã',
      actions: [
        {
          name: 'üé≤ –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—ã',
          type: 'button',
          style: 'primary',
          integration: {
            url: `${baseUrl}/create-groups`,
            context: {
              action: 'create_groups',
              user_id: userId,
              channel_id: channelId,
            },
          },
        },
        {
          name: 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä',
          type: 'button',
          style: 'danger',
          integration: {
            url: `${baseUrl}/reset-selection`,
            context: {
              action: 'reset_selection',
              user_id: userId,
              channel_id: channelId,
            },
          },
        },
      ],
    });
  }

  console.log('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ attachments:', JSON.stringify(attachments, null, 2));
  return attachments;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
async function createSelectionMenu(channelId, userId) {
  try {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è channelId:', channelId, 'userId:', userId);
    const channelMembers = await getChannelMembers(channelId);

    if (channelMembers.length === 0) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞');
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞');
    }

    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è userId:', userId);
    sessions[userId] = {
      selectedUsers: [],
      groupSize: 3,
      channelId: channelId,
      allUsers: channelMembers,
    };
    console.log('–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', JSON.stringify(sessions[userId], null, 2));

    const attachments = await updateSelectionMenu(channelId, userId);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
    try {
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —á–µ—Ä–µ–∑ SDK');
      await client.createPost({
        channel_id: channelId,
        message: '',
        props: {
          attachments: attachments,
        },
      });
      console.log('–ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ SDK');
    } catch (sdkError) {
      console.error('–û—à–∏–±–∫–∞ SDK –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é, –ø–µ—Ä–µ—Ö–æ–¥ –∫ HTTP:', sdkError.message);
      await createPostHttp(channelId, '', { attachments: attachments });
      console.log('–ú–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ HTTP');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ createSelectionMenu:', error.message);
    throw error;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
async function initializeClient() {
  console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Mattermost');
  const isAuth = await testAuth();
  console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', isAuth);
  return isAuth;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Slash-–∫–æ–º–∞–Ω–¥—ã /groupbot
app.post('/groupbot', async (req, res) => {
  console.log('=== GROUPBOT REQUEST ===');
  console.log('Body:', JSON.stringify(req.body, null, 2));
  const { channel_id, user_id, text } = req.body;

  try {
    const isAuth = await initializeClient();
    if (!isAuth) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞');
      res.json({
        response_type: 'ephemeral',
        text: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.',
      });
      return;
    }

    if (!text || text.trim() === '' || text.trim() === 'menu') {
      console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é');
      await createSelectionMenu(channel_id, user_id);
      res.json({
        response_type: 'ephemeral',
        text: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω! –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∏–∫–∞—è –ø–æ –∫–Ω–æ–ø–∫–∞–º.',
      });
    } else if (text.includes('quick')) {
      console.log('–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø');
      const channelMembers = await getChannelMembers(channel_id);
      if (channelMembers.length === 0) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞');
        res.json({
          response_type: 'ephemeral',
          text: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞.',
        });
        return;
      }

      const groupSize = 3;
      const groups = createGroups(channelMembers, groupSize);

      let response = `## üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –≥—Ä—É–ø–ø—ã (—Ä–∞–∑–º–µ—Ä: ${groupSize})\n\n`;
      groups.forEach((group, index) => {
        const members = group.map((user) => `@${user.username}`).join(', ');
        response += `**–ì—Ä—É–ø–ø–∞ ${index + 1}:** ${members}\n`;
      });

      try {
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ SDK');
        await client.createPost({
          channel_id,
          message: response,
        });
        console.log('–ì—Ä—É–ø–ø—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ SDK');
      } catch (postError) {
        console.error(
          '–û—à–∏–±–∫–∞ SDK –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä—É–ø–ø, –ø–µ—Ä–µ—Ö–æ–¥ –∫ HTTP:',
          postError.message,
        );
        await createPostHttp(channel_id, response);
        console.log('–ì—Ä—É–ø–ø—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ HTTP');
      }

      res.json({
        response_type: 'ephemeral',
        text: '–ì—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!',
      });
    } else {
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏');
      res.json({
        response_type: 'ephemeral',
        text: `**GroupBot - –°–ø—Ä–∞–≤–∫–∞:**
        
‚Ä¢ \`/groupbot\` –∏–ª–∏ \`/Áæ§bot menu\` - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ \`/groupbot quick\` - –±—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—ã –∏–∑ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
        
**–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∑–≤–æ–ª—è–µ—Ç:**
‚Üí –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∫–ª–∏–∫–∞—è –ø–æ –∫–Ω–æ–ø–∫–∞–º)
‚Üí –ó–∞–¥–∞—Ç—å —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø (2-5 —á–µ–ª–æ–≤–µ–∫)
‚Üí –°–æ–∑–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –≥—Ä—É–ø–ø—ã`,
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /groupbot:', error.message);
    res.json({
      response_type: 'ephemeral',
      text: `–û—à–∏–±–∫–∞: ${error.message}`,
    });
  }
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/toggle-user', async (req, res) => {
  console.log('=== TOGGLE USER REQUEST ===');
  console.log('Headers:', JSON.stringify(req.headers, null, 2));
  console.log('Body:', JSON.stringify(req.body, null, 2));
  console.log('Context:', JSON.stringify(req.body.context, null, 2));

  const { user_id, target_user_id, channel_id } = req.body.context || {};

  console.log('Extracted data:', { user_id, target_user_id, channel_id });
  console.log('Sessions:', JSON.stringify(Object.keys(sessions), null, 2));

  if (!user_id || !sessions[user_id]) {
    console.log('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞ –¥–ª—è userId:', user_id);
    res.json({
      ephemeral_text: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ.',
    });
    return;
  }

  const session = sessions[user_id];
  console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', JSON.stringify(session, null, 2));
  const userIndex = session.selectedUsers.indexOf(target_user_id);

  console.log('–ò–Ω–¥–µ–∫—Å —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userIndex);

  if (userIndex === -1) {
    session.selectedUsers.push(target_user_id);
    console.log('–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', target_user_id);
  } else {
    session.selectedUsers.splice(userIndex, 1);
    console.log('–£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', target_user_id);
  }

  console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', session.selectedUsers);

  const attachments = await updateSelectionMenu(channel_id, user_id);
  console.log('–û—Ç–≤–µ—Ç —Å attachments:', JSON.stringify(attachments, null, 2));

  res.json({
    update: {
      message: '',
      props: {
        attachments: attachments,
      },
    },
  });
});

// –°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞
app.post('/reset-selection', async (req, res) => {
  console.log('=== RESET SELECTION REQUEST ===');
  console.log('Body:', JSON.stringify(req.body, null, 2));

  const { user_id, channel_id } = req.body.context || {};

  if (!user_id || !sessions[user_id]) {
    console.log('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞ –¥–ª—è userId:', user_id);
    res.json({
      ephemeral_text: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ.',
    });
    return;
  }

  console.log('–°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è userId:', user_id);
  sessions[user_id].selectedUsers = [];

  const attachments = await updateSelectionMenu(channel_id, user_id);
  console.log('–û—Ç–≤–µ—Ç —Å attachments:', JSON.stringify(attachments, null, 2));

  res.json({
    update: {
      message: '',
      props: {
        attachments: attachments,
      },
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
app.post('/select-size', async (req, res) => {
  console.log('=== SELECT SIZE REQUEST ===');
  console.log('Body:', JSON.stringify(req.body, null, 2));

  const { user_id, channel_id } = req.body.context || {};
  const { selected_option } = req.body;

  if (!user_id || !sessions[user_id]) {
    console.log('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞ –¥–ª—è userId:', user_id);
    res.json({
      ephemeral_text: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ.',
    });
    return;
  }

  if (selected_option && selected_option.value) {
    sessions[user_id].groupSize = parseInt(selected_option.value, 10) || 3;
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã:', sessions[user_id].groupSize);
  }

  const attachments = await updateSelectionMenu(channel_id, user_id);
  console.log('–û—Ç–≤–µ—Ç —Å attachments:', JSON.stringify(attachments, null, 2));

  res.json({
    update: {
      message: '',
      props: {
        attachments: attachments,
      },
    },
  });
});

// –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø
app.post('/create-groups', async (req, res) => {
  console.log('=== CREATE GROUPS REQUEST ===');
  console.log('Body:', JSON.stringify(req.body, null, 2));

  const { channel_id, user_id } = req.body.context || {};

  if (!user_id || !sessions[user_id]) {
    console.log('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞ –¥–ª—è userId:', user_id);
    res.json({
      ephemeral_text: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ.',
    });
    return;
  }

  const session = sessions[user_id];

  if (session.selectedUsers.length === 0) {
    console.log('–ù–µ –≤—ã–±—Ä–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø');
    res.json({
      ephemeral_text: '–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø!',
    });
    return;
  }

  try {
    const selectedUserData = session.allUsers.filter((user) =>
      session.selectedUsers.includes(user.id),
    );
    console.log(
      '–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –≥—Ä—É–ø–ø:',
      selectedUserData.map((u) => u.username),
    );

    const groups = createGroups(selectedUserData, session.groupSize);

    let response = `## üéØ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã\n`;
    response += `**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** ${selectedUserData.length} | **–†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø:** ${session.groupSize}\n\n`;

    groups.forEach((group, index) => {
      const members = group.map((user) => `@${user.username}`).join(', ');
      response += `**–ì—Ä—É–ø–ø–∞ ${index + 1}:** ${members}\n`;
    });

    const remainder = selectedUserData.length % session.groupSize;
    if (remainder > 0) {
      response += `\n*–ü–æ—Å–ª–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç ${remainder} —á–µ–ª–æ–≤–µ–∫*`;
    }

    try {
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ SDK');
      await client.createPost({
        channel_id,
        message: response,
      });
      console.log('–ì—Ä—É–ø–ø—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ SDK');
    } catch (sdkError) {
      console.error('–û—à–∏–±–∫–∞ SDK –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä—É–ø–ø, –ø–µ—Ä–µ—Ö–æ–¥ –∫ HTTP:', sdkError.message);
      await createPostHttp(channel_id, response);
      console.log('–ì—Ä—É–ø–ø—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ HTTP');
    }

    console.log('–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è userId:', user_id);
    delete sessions[user_id];

    res.json({
      ephemeral_text: 'üéâ –ì—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ!',
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø:', error.message);
    res.json({
      ephemeral_text: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø: ${error.message}`,
    });
  }
});

// Health check endpoint
app.get('/health', async (req, res) => {
  console.log('=== HEALTH CHECK REQUEST ===');
  const authStatus = await testAuth();
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    mattermost_auth: authStatus,
  });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
initializeClient().catch((error) => {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', error.message);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

export default app;
