import 'dotenv/config';
import { Client4 } from '@mattermost/client';
import express from 'express';
const app = express();

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Mattermost
const mattermostUrl = process.env.MATTERMOST_URL;
const botToken = process.env.BOT_TOKEN;

if (!mattermostUrl || !botToken) {
  process.exit(1);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
const client = new Client4();
client.setUrl(mattermostUrl);
client.setToken(botToken.replace('Bearer ', ''));

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
async function getChannelMembers(channelId) {
  const members = await client.getChannelMembers(channelId);
  const userIds = Array.isArray(members) ? members.map((m) => m.user_id) : [];
  const users = [];

  for (const userId of userIds) {
    const user = await client.getUser(userId);
    if (!user.is_bot && user.delete_at === 0) {
      users.push(user);
    }
  }

  return users;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ HTTP (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)
async function createPostHttp(channelId, message) {
  const postData = {
    channel_id: channelId,
    message: message,
  };

  const response = await fetch(`${mattermostUrl}/api/v4/posts`, {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${botToken.replace('Bearer ', '')}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(postData),
  });

  if (!response.ok) {
    throw new Error(`HTTP ${response.status}`);
  }

  return response.json();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –≥—Ä—É–ø–ø
function createGroups(users, groupSize) {
  const shuffled = [...users].sort(() => 0.5 - Math.random());
  const groups = [];
  for (let i = 0; i < shuffled.length; i += groupSize) {
    groups.push(shuffled.slice(i, i + groupSize));
  }
  return groups;
}

// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
function findUserByName(users, name) {
  const normalizedName = name.trim().toLowerCase();
  return users.find((user) => {
    const username = user.username.toLowerCase();
    const fullName = `${user.first_name} ${user.last_name}`.trim().toLowerCase();
    return username === normalizedName || fullName === normalizedName;
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Slash-–∫–æ–º–∞–Ω–¥—ã /groupbot
app.post('/groupbot', async (req, res) => {
  const { channel_id, text } = req.body;

  if (!text || text.trim() === '') {
    res.json({
      response_type: 'ephemeral',
      text: `**GroupBot - –°–ø—Ä–∞–≤–∫–∞:**
      
‚Ä¢ \`/groupbot <—á–∏—Å–ª–æ> <–∏–º—è1>\\n<–∏–º—è2>\\n...\` - —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  –ü—Ä–∏–º–µ—Ä: \`/groupbot 2 –ï–ª–µ–Ω–∞ –Ø—â–µ–Ω–∫–æ\\n–ê–Ω–∞—Ç–æ–ª–∏–π –ö–∏—Ä–∏–ª–ª–æ–≤\\n–ê–Ω–∞—Å—Ç–∞—Å–∏—è –ì—Ä–µ—á–∞–Ω–æ–≤–∞\`
      
**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
‚Üí –ß–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: 2‚Äì5
‚Üí –ò–º–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å username –∏–ª–∏ –∏–º–µ–Ω–∏/—Ñ–∞–º–∏–ª–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞`,
    });
    return;
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã
  const lines = text
    .split('\n')
    .map((line) => line.trim())
    .filter(Boolean);
  if (lines.length < 2) {
    res.json({
      response_type: 'ephemeral',
      text: '–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.',
    });
    return;
  }

  const groupSize = parseInt(lines[0], 10);
  if (isNaN(groupSize) || groupSize < 2 || groupSize > 5) {
    res.json({
      response_type: 'ephemeral',
      text: '–û—à–∏–±–∫–∞: —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 5.',
    });
    return;
  }

  const names = lines.slice(1);
  if (!names.length) {
    res.json({
      response_type: 'ephemeral',
      text: '–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.',
    });
    return;
  }

  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
    const channelMembers = await getChannelMembers(channel_id);
    if (!channelMembers.length) {
      res.json({
        response_type: 'ephemeral',
        text: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞.',
      });
      return;
    }

    // –ü–æ–∏—Å–∫ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const selectedUsers = [];
    const notFound = [];

    for (const name of names) {
      const user = findUserByName(channelMembers, name);
      if (user) {
        selectedUsers.push(user);
      } else {
        notFound.push(name);
      }
    }

    if (notFound.length) {
      res.json({
        response_type: 'ephemeral',
        text: `–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏: ${notFound.join(
          ', ',
        )}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–µ–Ω–∞ –∏–ª–∏ username.`,
      });
      return;
    }

    if (selectedUsers.length < groupSize) {
      res.json({
        response_type: 'ephemeral',
        text: `–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (${selectedUsers.length}) –¥–ª—è –≥—Ä—É–ø–ø —Ä–∞–∑–º–µ—Ä–∞ ${groupSize}.`,
      });
      return;
    }

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø
    const groups = createGroups(selectedUsers, groupSize);
    let response = `## üéØ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã\n`;
    response += `**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** ${selectedUsers.length} | **–†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø:** ${groupSize}\n\n`;
    groups.forEach((group, index) => {
      const members = group.map((user) => `@${user.username}`).join(', ');
      response += `**–ì—Ä—É–ø–ø–∞ ${index + 1}:** ${members}\n`;
    });

    const remainder = selectedUsers.length % groupSize;
    if (remainder > 0) {
      response += `\n*–ü–æ—Å–ª–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç ${remainder} —á–µ–ª–æ–≤–µ–∫*`;
    }

    // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    try {
      await client.createPost({ channel_id, message: response });
    } catch {
      await createPostHttp(channel_id, response);
    }

    res.json({
      response_type: 'ephemeral',
      text: '–ì—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ!',
    });
  } catch (error) {
    res.json({
      response_type: 'ephemeral',
      text: `–û—à–∏–±–∫–∞: ${error.message}`,
    });
  }
});

// Health check endpoint
app.get('/health', async (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {});

export default app;
