import 'dotenv/config';
import { Client4 } from '@mattermost/client';
import express from 'express';
const app = express();

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Mattermost
const mattermostUrl = process.env.MATTERMOST_URL;
const botToken = process.env.BOT_TOKEN;

console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', {
  mattermostUrl,
  botToken: botToken ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
});

if (!mattermostUrl || !botToken) {
  console.error(
    '–û—à–∏–±–∫–∞: MATTERMOST_URL –∏–ª–∏ BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è',
  );
  process.exit(1);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
const client = new Client4();
client.setUrl(mattermostUrl);

console.log('–ö–ª–∏–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å URL:', mattermostUrl);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function testAuth() {
  console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');

  try {
    const cleanToken = botToken.replace('Bearer ', '');
    client.setToken(cleanToken);

    const me = await client.getMe();
    console.log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
      id: me.id,
      username: me.username,
      is_bot: me.is_bot,
    });
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
    return false;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ HTTP
async function getChannelMembersHttp(channelId) {
  try {
    const cleanToken = botToken.replace('Bearer ', '');

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
    const membersResponse = await fetch(
      `${mattermostUrl}/api/v4/channels/${channelId}/members`,
      {
        method: 'GET',
        headers: {
          Authorization: `Bearer ${cleanToken}`,
          'Content-Type': 'application/json',
        },
      },
    );

    if (!membersResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${membersResponse.status}`);
    }

    const members = await membersResponse.json();
    const userIds = members.map((member) => member.user_id);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    const users = [];
    for (const userId of userIds) {
      try {
        const userResponse = await fetch(`${mattermostUrl}/api/v4/users/${userId}`, {
          method: 'GET',
          headers: {
            Authorization: `Bearer ${cleanToken}`,
            'Content-Type': 'application/json',
          },
        });

        if (userResponse.ok) {
          const user = await userResponse.json();
          // –§–∏–ª—å—Ç—Ä—É–µ–º –±–æ—Ç–æ–≤ –∏ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          if (!user.is_bot && user.delete_at === 0) {
            users.push(user);
          }
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
      }
    }

    console.log(`–ü–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞: ${users.length}`);
    return users;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞:', error.message);
    return [];
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ SDK
async function getChannelMembers(channelId) {
  try {
    console.log('–ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞:', channelId);

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ SDK
    try {
      await client.getMe(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é

      const members = await client.getChannelMembers(channelId);
      const userIds = Array.isArray(members) ? members.map((m) => m.user_id) : [];

      const users = [];
      for (const userId of userIds) {
        try {
          const user = await client.getUser(userId);
          if (!user.is_bot && user.delete_at === 0) {
            users.push(user);
          }
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
        }
      }

      console.log(`SDK: –ü–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞: ${users.length}`);
      return users;
    } catch (sdkError) {
      console.log('SDK –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP...');
      return await getChannelMembersHttp(channelId);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞:', error.message);
    return [];
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ HTTP
async function createPostHttp(channelId, message, props = null) {
  try {
    const cleanToken = botToken.replace('Bearer ', '');
    const postData = {
      channel_id: channelId,
      message: message,
    };

    if (props) {
      postData.props = props;
    }

    const response = await fetch(`${mattermostUrl}/api/v4/posts`, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${cleanToken}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(postData),
    });

    if (response.ok) {
      const post = await response.json();
      console.log('–ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ HTTP:', post.id);
      return post;
    } else {
      const errorText = await response.text();
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ HTTP:', response.status, errorText);
      throw new Error(`HTTP ${response.status}: ${errorText}`);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:', error.message);
    throw error;
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –≥—Ä—É–ø–ø
function createGroups(users, groupSize) {
  const shuffled = [...users].sort(() => 0.5 - Math.random());
  const groups = [];
  for (let i = 0; i < shuffled.length; i += groupSize) {
    groups.push(shuffled.slice(i, i + groupSize));
  }
  return groups;
}

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const sessions = {};

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
async function createSelectionMenu(channelId, userId) {
  try {
    const channelMembers = await getChannelMembers(channelId);

    if (channelMembers.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!sessions[userId]) {
      sessions[userId] = {
        selectedUsers: [],
        groupSize: 3,
        channelId: channelId,
        allUsers: channelMembers,
      };
    } else {
      sessions[userId].channelId = channelId;
      sessions[userId].allUsers = channelMembers;
      sessions[userId].selectedUsers = [];
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 25 –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–æ–≤ Mattermost)
    const userOptions = channelMembers.slice(0, 25).map((user) => ({
      text: `${user.first_name} ${user.last_name} (@${user.username})`.trim(),
      value: user.id,
    }));

    const baseUrl = process.env.VERCEL_URL || 'https://mattermost-bot-vert.vercel.app';

    const attachments = [
      {
        color: '#2196F3',
        title: 'üéØ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø',
        text: `–ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ: **${channelMembers.length}**\n\n**–®–∞–≥ 1:** –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø`,
        actions: [
          {
            name: 'select_users',
            type: 'select',
            data_source: 'static',
            placeholder: '–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...',
            options: userOptions,
            integration: {
              url: `${baseUrl}/select-users`,
              context: {
                action: 'select_users',
                user_id: userId,
                channel_id: channelId,
              },
            },
          },
        ],
      },
      {
        color: '#4CAF50',
        text: '**–®–∞–≥ 2:** –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø',
        actions: [
          {
            name: 'select_size',
            type: 'select',
            placeholder: '–†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã: 3',
            options: [
              { text: 'üë• 2 —á–µ–ª–æ–≤–µ–∫–∞', value: '2' },
              { text: 'üë• 3 —á–µ–ª–æ–≤–µ–∫–∞', value: '3' },
              { text: 'üë• 4 —á–µ–ª–æ–≤–µ–∫–∞', value: '4' },
              { text: 'üë• 5 —á–µ–ª–æ–≤–µ–∫', value: '5' },
            ],
            integration: {
              url: `${baseUrl}/select-size`,
              context: {
                action: 'select_size',
                user_id: userId,
                channel_id: channelId,
              },
            },
          },
        ],
      },
      {
        color: '#FF9800',
        text: '**–®–∞–≥ 3:** –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—ã',
        actions: [
          {
            name: 'create_groups',
            type: 'button',
            style: 'primary',
            integration: {
              url: `${baseUrl}/create-groups`,
              context: {
                action: 'create_groups',
                user_id: userId,
                channel_id: channelId,
              },
            },
          },
        ],
      },
    ];

    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ SDK, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - —á–µ—Ä–µ–∑ HTTP
    try {
      await client.createPost({
        channel_id: channelId,
        message: '',
        props: {
          attachments: attachments,
        },
      });
      console.log('–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ SDK');
    } catch (sdkError) {
      console.log('SDK –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ HTTP...');
      await createPostHttp(channelId, '', { attachments: attachments });
      console.log('–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ HTTP');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é:', error.message);
    throw error;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
async function initializeClient() {
  console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mattermost –∫–ª–∏–µ–Ω—Ç–∞...');
  const isAuth = await testAuth();
  if (!isAuth) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Mattermost');
    return false;
  }
  return true;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Slash-–∫–æ–º–∞–Ω–¥—ã /groupbot
app.post('/groupbot', async (req, res) => {
  console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /groupbot:', req.body);
  const { channel_id, user_id, text } = req.body;

  try {
    const isAuth = await initializeClient();
    if (!isAuth) {
      res.json({
        response_type: 'ephemeral',
        text: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.',
      });
      return;
    }

    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º "menu" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    if (!text || text.trim() === '' || text.trim() === 'menu') {
      await createSelectionMenu(channel_id, user_id);
      res.json({
        response_type: 'ephemeral',
        text: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø.',
      });
    }
    // –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø —Å–æ –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–∞–Ω–∞–ª–∞
    else if (text.includes('quick')) {
      const channelMembers = await getChannelMembers(channel_id);
      if (channelMembers.length === 0) {
        res.json({
          response_type: 'ephemeral',
          text: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞.',
        });
        return;
      }

      const groupSize = 3; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const groups = createGroups(channelMembers, groupSize);

      let response = `## üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –≥—Ä—É–ø–ø—ã (—Ä–∞–∑–º–µ—Ä: ${groupSize})\n\n`;
      groups.forEach((group, index) => {
        const members = group.map((user) => `@${user.username}`).join(', ');
        response += `**–ì—Ä—É–ø–ø–∞ ${index + 1}:** ${members}\n`;
      });

      try {
        await client.createPost({
          channel_id,
          message: response,
        });
      } catch (postError) {
        await createPostHttp(channel_id, response);
      }

      res.json({
        response_type: 'ephemeral',
        text: '–ì—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!',
      });
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
      res.json({
        response_type: 'ephemeral',
        text: `**GroupBot - –°–ø—Ä–∞–≤–∫–∞:**
        
‚Ä¢ \`/groupbot\` –∏–ª–∏ \`/groupbot menu\` - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ \`/groupbot quick\` - –±—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—ã –∏–∑ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
        
**–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∑–≤–æ–ª—è–µ—Ç:**
‚Üí –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Üí –ó–∞–¥–∞—Ç—å —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø (2-5 —á–µ–ª–æ–≤–µ–∫)
‚Üí –°–æ–∑–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –≥—Ä—É–ø–ø—ã`,
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
    res.json({
      response_type: 'ephemeral',
      text: `–û—à–∏–±–∫–∞: ${error.message}`,
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.post('/select-users', async (req, res) => {
  console.log('–í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', req.body);
  const { user_id, channel_id } = req.body.context || {};
  const { selected_option } = req.body;

  if (!user_id || !sessions[user_id]) {
    res.json({
      ephemeral_text: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ.',
    });
    return;
  }

  if (selected_option && selected_option.value) {
    const userId = selected_option.value;
    if (!sessions[user_id].selectedUsers.includes(userId)) {
      sessions[user_id].selectedUsers.push(userId);
    }
  }

  const selectedCount = sessions[user_id].selectedUsers.length;
  const selectedUsernames = sessions[user_id].allUsers
    .filter((user) => sessions[user_id].selectedUsers.includes(user.id))
    .map((user) => user.username)
    .join(', ');

  res.json({
    update: {
      message: `‚úÖ **–í—ã–±—Ä–∞–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${selectedCount}**\n${
        selectedUsernames ? `–£—á–∞—Å—Ç–Ω–∏–∫–∏: ${selectedUsernames}` : ''
      }`,
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
app.post('/select-size', async (req, res) => {
  console.log('–í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã:', req.body);
  const { user_id } = req.body.context || {};
  const { selected_option } = req.body;

  if (!user_id || !sessions[user_id]) {
    res.json({
      ephemeral_text: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ.',
    });
    return;
  }

  if (selected_option && selected_option.value) {
    sessions[user_id].groupSize = parseInt(selected_option.value, 10) || 3;
  }

  res.json({
    update: {
      message: `üìä **–†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø: ${sessions[user_id].groupSize} —á–µ–ª–æ–≤–µ–∫**`,
    },
  });
});

// –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø
app.post('/create-groups', async (req, res) => {
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø:', req.body);
  const { channel_id, user_id } = req.body.context || {};

  if (!user_id || !sessions[user_id]) {
    res.json({
      ephemeral_text: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ.',
    });
    return;
  }

  const session = sessions[user_id];

  if (session.selectedUsers.length === 0) {
    res.json({
      ephemeral_text: '–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø!',
    });
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    const selectedUserData = session.allUsers.filter((user) =>
      session.selectedUsers.includes(user.id),
    );

    if (selectedUserData.length === 0) {
      res.json({
        ephemeral_text: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!',
      });
      return;
    }

    const groups = createGroups(selectedUserData, session.groupSize);

    let response = `## üéØ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã\n`;
    response += `**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** ${selectedUserData.length} | **–†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø:** ${session.groupSize}\n\n`;

    groups.forEach((group, index) => {
      const members = group.map((user) => `@${user.username}`).join(', ');
      response += `**–ì—Ä—É–ø–ø–∞ ${index + 1}:** ${members}\n`;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–ø–æ–ª–Ω–æ–π –≥—Ä—É–ø–ø–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    const remainder = selectedUserData.length % session.groupSize;
    if (remainder > 0) {
      response += `\n*–ü–æ—Å–ª–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç ${remainder} —á–µ–ª–æ–≤–µ–∫*`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–∞–Ω–∞–ª
    try {
      await client.createPost({
        channel_id,
        message: response,
      });
    } catch (sdkError) {
      await createPostHttp(channel_id, response);
    }

    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    delete sessions[user_id];

    res.json({
      ephemeral_text: 'üéâ –ì—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ!',
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø:', error);
    res.json({
      ephemeral_text: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø: ${error.message}`,
    });
  }
});

// Health check endpoint
app.get('/health', async (req, res) => {
  const authStatus = await testAuth();
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    mattermost_auth: authStatus,
    mattermost_url: mattermostUrl,
    token_present: !!botToken,
  });
});

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π endpoint
app.get('/debug', async (req, res) => {
  try {
    res.json({
      timestamp: new Date().toISOString(),
      mattermost_url: mattermostUrl,
      token_present: !!botToken,
      active_sessions: Object.keys(sessions).length,
      session_details: Object.entries(sessions).map(([userId, session]) => ({
        user_id: userId,
        selected_users_count: session.selectedUsers?.length || 0,
        group_size: session.groupSize,
        channel_id: session.channelId,
      })),
    });
  } catch (error) {
    res.status(500).json({
      error: error.message,
      timestamp: new Date().toISOString(),
    });
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
initializeClient().catch((error) => {
  console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

export default app;
